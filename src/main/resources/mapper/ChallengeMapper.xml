<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.spring.mapper.ChallengeMapper">

	<select resultType="com.spring.dto.Challenge" 
			id="getAllChall">
		SELECT chall_id, 
				chall_reg_id, 
				region_id, 
				chall_name, 
				chall_intro, 
				chall_start_date, 
				chall_end_date, 
				chall_all_auth, 
				chall_week_auth,
				chall_category, 
				chall_sit, 
				chall_auth, 
				chall_online, 
				chall_size, 
				chall_pic
		FROM challenge 
		ORDER BY chall_id DESC
	</select>
	
	<select resultType="com.spring.dto.ChallengeRegion" 
			id="getAllChallR">
		SELECT challenge.chall_id, 
				challenge.chall_reg_id, 
				challenge.chall_name, 
				challenge.chall_intro, 
				challenge.chall_start_date, 
				challenge.chall_end_date, 
				challenge.chall_all_auth, 
				challenge.chall_week_auth, 
				challenge.chall_category, 
				challenge.chall_sit, 
				challenge.chall_auth, 
				challenge.chall_online, 
				challenge.chall_size, 
				challenge.chall_pic, 
				region.region_state, 
				region.region_city, 
				region.region_district, 
				(select race.race_name from race where race.race_id = challenge.race_id) as race_name
		FROM challenge, region
		WHERE challenge.region_id = region.region_id and chall_sit != '종료' and chall_sit != '진행중'
		ORDER BY chall_id DESC
	</select>

	<select resultType="com.spring.dto.Challenge" 
			id="getChallByChallId">
		SELECT chall_id, chall_reg_id, region_id, chall_name, chall_intro, chall_start_date, chall_end_date, chall_all_auth, chall_week_auth,chall_category, chall_sit, chall_auth, chall_online, chall_size, chall_pic
		FROM challenge
		WHERE chall_id = #{chall_id} 
	</select>

	<select resultType="com.spring.dto.User" 
			id="getHostByChallId">
		SELECT user_id, nickname, user_title, user_pic
		FROM rh_user
		WHERE user_id = (SELECT chall_reg_id 
						 FROM challenge 
						 where chall_id = #{chall_id}) 
	</select>

	<select resultType="com.spring.dto.UserChallenge" 
			id="getUserByChallId">
		SELECT rh_user.user_id, user_chall.chall_id, user_chall.chall_auth_num, user_chall.chall_reg_status, user_chall.user_chall_status, user_chall.user_reg_status, user_chall.user_deny_num, rh_user.nickname, rh_user.intro, rh_user.user_title, rh_user.user_pic
		FROM user_chall, rh_user
		WHERE user_chall.chall_id = #{chall_id} and rh_user.user_id = user_chall.user_id
	</select>

	<update id="applyByChallId" 
			parameterType="com.spring.dto.UserChallenge">
		MERGE INTO user_chall
		using dual
		on (user_id=#{applyId} and chall_id=#{chall_id})
		WHEN MATCHED THEN
			UPDATE
				SET user_reg_status = 'Y'
		WHEN NOT MATCHED THEN
			INSERT (user_id,chall_id,user_reg_status)
			VALUES (#{applyId},#{chall_id},'Y') 
	</update>
	
	<delete id="withdrawByChallId" 
			parameterType="com.spring.dto.UserChallenge">
			delete 
			from user_chall 
			where user_id = #{applyId} and chall_id=#{chall_id}
	
	</delete>
	
	<update id="acceptIdbyChallId"
			parameterType="com.spring.dto.UserChallenge">
			UPDATE user_chall
			SET chall_reg_status = 'Y'
			WHERE user_id=#{acceptId} and chall_id=#{chall_id}
	</update>
	
	<update id="declineIdbyChallId"
			parameterType="com.spring.dto.UserChallenge">
			UPDATE user_chall
			SET user_reg_status = 'N', user_deny_num =  user_deny_num+1
			WHERE user_id=#{declineId} and chall_id=#{chall_id}
	</update>
	
	<update id="kickIdbyChallId"
			parameterType="com.spring.dto.UserChallenge">
			UPDATE user_chall
			SET user_reg_status = 'N', user_deny_num =  user_deny_num+1, chall_reg_status = 'N'
			WHERE user_id=#{kickId} and chall_id=#{chall_id}
	</update>
	
	<delete id="deleteUserchallbyChallId" 
			parameterType="com.spring.dto.UserChallenge">
			delete 
			from user_chall 
			where chall_id=#{challId}
	</delete>
	
	<delete id="deleteRoutebyChallId" 
			parameterType="com.spring.dto.Route">
			delete 
			from chall_route
			where chall_id=#{challId}
	</delete>
	
	<delete id="deleteChallbyChallId" 
			parameterType="com.spring.dto.Challenge">
			delete 
			from challenge
			where chall_id=#{challId}
	</delete>
	
	<delete id="deleteApplyUserbyChallId" 
			parameterType="com.spring.dto.UserChallenge">
			delete 
			from user_chall
			where chall_id=#{chall_Id} and chall_reg_status='N'
	</delete>

	<select resultType="com.spring.dto.ChallengeRegion" 
			id="getChallByOption" 
			parameterType="java.util.List">
		SELECT challenge.chall_id, 
				challenge.chall_reg_id, 
				challenge.chall_name, 
				challenge.chall_intro, 
				challenge.chall_start_date, 
				challenge.chall_end_date, 
				challenge.chall_all_auth, 
				challenge.chall_week_auth, 
				challenge.chall_category, 
				challenge.chall_sit, 
				challenge.chall_auth, 
				challenge.chall_online, 
				challenge.chall_size, 
				challenge.chall_pic, 
				region.region_state, 
				region.region_city, 
				region.region_district,
				(select race.race_name from race where race.race_id = challenge.race_id) as race_name
		FROM challenge, region
		<trim prefixOverrides="AND |OR" prefix="WHERE">
			challenge.region_id = region.region_id and chall_sit != '종료' and chall_sit != '진행중'
			<if test="!online.isEmpty()">
				and challenge.chall_online IN 
				<foreach close=")" open="(" separator="," index="idx" item="value" collection="online">
					#{value} 
				</foreach>
			</if>
			<if test="!date.isEmpty()">
				AND extract (month from challenge.chall_start_date) in 
				<foreach close=")" open="(" separator="," index="idx" item="value" collection="date">
					#{value} 
				</foreach>
			</if>
			<if test="!cat.isEmpty()">
				AND challenge.chall_category IN 
				<foreach close=")" open="(" separator="," index="idx" item="value" collection="cat">
					#{value} 
				</foreach>
			</if>
			<if test="!con.isEmpty()">
				AND challenge.chall_sit IN 
				<foreach close=")" open="(" separator="," index="idx" item="value" collection="con">
					#{value} 
				</foreach>
			</if>
			<if test="!state.isEmpty() and city.isEmpty()">
				AND challenge.region_id IN (select region_id from region where region_state IN 
				<foreach close=")" open="(" separator="," index="idx" item="value" collection="state">
					#{value} 
				</foreach>
				) 
			</if>
			<if test="!state.isEmpty() and !city.isEmpty()">
				AND challenge.region_id IN (select region_id from region where region_city in 
				<foreach close=")" open="(" separator="," index="idx" item="value" collection="city">
					#{value} 
				</foreach>
				) 
			</if>
			<if test="!keyword.isEmpty()">
				AND challenge.chall_name LIKE '%'||#{keyword}||'%' 
			</if>
		</trim>
		ORDER BY chall_id DESC
	</select>
	
	<insert id="insertChallenge" parameterType="com.spring.dto.Challenge">
 		INSERT INTO challenge 
 				(chall_name,
 				chall_id,
 				chall_reg_id,
 				 chall_intro, 
 			 		chall_start_date, 
 						chall_end_date, 
 			 				chall_size,
 			 					chall_category,
 			 						region_id,
 			 							chall_sit,
 			 								chall_online,
 			 									chall_all_auth,
 			 									chall_week_auth,
 			 									race_id)
 			 		VALUES (#{chall_name},
 			 		challenge_seq.NEXTVAL,
 			 					#{chall_reg_id}, 
 			 					#{chall_intro},
 			 						#{chall_start_date},
 			 							#{chall_end_date}, 
 			 								#{chall_size}, 
 			 									#{chall_category},
 			 										#{region_id},
 			 											#{chall_sit},
 			 												#{chall_online},
 			 													(#{chall_end_date}-#{chall_start_date})/7*#{chall_week_auth},
 			 														#{chall_week_auth},
 			 															#{race_id})
			<selectKey keyProperty="chall_id" resultType="int">
				SELECT challenge_seq.CURRVAL AS chall_id FROM DUAL
			</selectKey>
 	</insert>
 	
 	<insert id="insertHost" parameterType="com.spring.dto.UserChallenge" >
 		INSERT INTO USER_CHALL
 					(user_id,
 					chall_id,
 					chall_reg_status,
 					user_reg_status)
 		VALUES(#{userId},
 				#{challId},
 				'Y',
 				'Y')
 					
 	</insert>
 	
 	<select id="checkOtherChall" resultType="_int">
 		select count(user_id)
 		from user_chall
 		where user_id=#{applyId} and (user_reg_status='Y' or chall_reg_status='Y') 
 	</select>
 	

 	<!-- 인증게시판 -->
 	
 	<select id="getPostByChallId" resultType="com.spring.dto.ChallengePost" >
		SELECT chall_id, auth_id, auth_title, auth_date
		FROM auth_post
		WHERE chall_id=#{chall_id}
		ORDER BY auth_date DESC
	</select>
	
	<select id="getPostByAuthId" resultType="com.spring.dto.ChallengePost">
		SELECT auth_title, auth_cont, chall_id, comment_id, auth_id, auth_date
		FROM auth_post
		WHERE auth_id=#{auth_id}
	</select>
	
	<select id="getUserbyAuthId" resultType="com.spring.dto.User">
		SELECT nickname, user_pic
		FROM rh_user
		WHERE user_id=(select comment_id
						from auth_post
						where auth_id=#{auth_id})
	</select>
	
	<select id="getImgbyAuthId" resultType="com.spring.dto.AuthPicture">
		SELECT auth_pic_uuid, auth_pic_title
		FROM auth_picture
		WHERE auth_id=#{auth_id}
	</select>
	
	<select id="getPostByUserandChall" resultType="com.spring.dto.ChallengePost" >
		SELECT chall_id, auth_id, auth_title, auth_date
		FROM auth_post
		WHERE chall_id=#{challId} and comment_id = #{userId}
	</select>
	
	<select id="getUserByChallIdAndUserId" resultType="string" >
		SELECT user_id
		FROM user_chall
		WHERE user_id=#{userId, jdbcType=VARCHAR} 
				and chall_reg_status = 'Y' 
				and chall_id =(
								select chall_id
								from challenge
								where chall_id=#{chall_id} and chall_sit='진행중')
	</select>
	
	
	<insert id="insertChallPost" parameterType="com.spring.dto.ChallengePost">
		INSERT INTO auth_post (auth_id, chall_id, comment_id, auth_title, auth_cont, auth_date)
		VALUES (POST_SEQ.nextval, #{chall_id}, #{comment_id, jdbcType=VARCHAR}, #{auth_title}, #{auth_cont}, SYSDATE)
		<selectKey resultType="int" keyProperty="auth_id">
			SELECT POST_SEQ.CURRVAL AS auth_id FROM DUAL
		</selectKey>
	</insert>
	
	<insert id="insertAuthPicture" parameterType="com.spring.dto.AuthPicture">
	INSERT INTO auth_picture (auth_pic_id, auth_id, auth_pic_uuid, auth_pic_date, auth_pic_title, auth_pic_path)
	VALUES (auth_picture_seq.nextval, #{auth_id}, #{auth_pic_uuid, jdbcType=VARCHAR}, SYSDATE, #{auth_pic_title}, #{auth_pic_path})
	</insert>
	
	<delete id="deleteAuthComment" parameterType="com.spring.dto.AuthComment">
		DELETE auth_comment
		WHERE auth_id=#{authId}
	</delete>
	
	<delete id="deleteAuthLike" parameterType="com.spring.dto.AuthLike">
		DELETE auth_like
		WHERE auth_id=#{authId}
	</delete>
	
	<delete id="deletePicbyAuthId" parameterType="com.spring.dto.AuthPicture">
		DELETE auth_picture
		WHERE auth_id=#{authId}
	</delete>
	
	<delete id="deletePostByAuthId" parameterType="com.spring.dto.ChallengePost">
	DELETE auth_post
	WHERE auth_id=#{auth_id} and comment_id = #{userId}
	</delete>
	
	
	
	<update id="updatePost" parameterType="com.spring.dto.ChallengePost">
	UPDATE auth_post
	SET auth_title=#{challpost.auth_title, jdbcType=VARCHAR},
		auth_cont=#{challpost.auth_cont, jdbcType=VARCHAR}
	WHERE auth_id=#{authId}
	</update>

 	<update id="updateChallenge" 
			parameterType="com.spring.dto.Challenge">
			UPDATE challenge
			SET chall_name = #{chall_name},
				chall_intro =#{chall_intro},
				chall_start_date = #{chall_start_date},
				chall_end_date = #{chall_end_date},
				chall_size = #{chall_size},
				chall_category = #{chall_category},
				region_id = #{region_id},
				chall_sit = #{chall_sit},
				chall_online = #{chall_online},
				chall_all_auth = #{chall_all_auth},
				chall_week_auth = #{chall_week_auth}
				
			WHERE chall_id=#{chall_id}
	</update>
	
	<insert id="insertComment" parameterType="com.spring.dto.AuthComment">
	INSERT INTO auth_comment (auth_comment_id, auth_id, user_id, auth_comment_date, auth_comment_cont)
	VALUES (auth_comment_seq.nextval, #{auth_id}, #{user_id}, SYSDATE, #{auth_comment_cont})
	</insert>
	
	<delete id="deleteComment" parameterType="com.spring.dto.AuthComment">
		DELETE FROM auth_comment
		WHERE auth_comment_id=#{commentId}
	</delete>
	
	<select id="getAllComment" resultType="com.spring.dto.AuthComment" >
		SELECT auth_comment_id, auth_id, auth_comment.user_id, auth_comment_date, auth_comment_cont, user_pic, nickname
		FROM auth_comment, rh_user
		WHERE auth_id = #{auth_id} and auth_comment.user_id = rh_user.user_id
		ORDER BY auth_comment_date DESC
	</select>
	
	<insert id="insertPostLike" parameterType="com.spring.dto.AuthLike">
		INSERT INTO auth_like (auth_id, user_id)
		VALUES (#{authId}, #{userId})
	</insert>
	
	<delete id="deletePostLike" parameterType="com.spring.dto.AuthLike">
		DELETE FROM auth_like
		WHERE auth_id=#{authId} and user_id=#{userId}
	</delete>
	
	<select id="getAllLike" resultType="com.spring.dto.AuthLike" >
		SELECT auth_id, user_id
		FROM auth_like
		WHERE auth_id = #{auth_id}
	</select>
	
	<update id="updateChallSit">
		update challenge
		set chall_sit =
			(CASE
				WHEN SYSDATE <![CDATA[>=]]> chall_start_date and SYSDATE <![CDATA[<=]]> chall_end_date THEN '진행중'
				WHEN SYSDATE <![CDATA[>]]> chall_end_date THEN '종료'
				ELSE chall_sit
				END)
	</update>
	
	<select resultType="com.spring.dto.ChallengeRegion" 
			id="getChallByUserId">
		SELECT challenge.chall_id, 
				challenge.chall_reg_id, 
				challenge.chall_name, 
				challenge.chall_intro, 
				challenge.chall_start_date, 
				challenge.chall_end_date, 
				challenge.chall_all_auth, 
				challenge.chall_week_auth, 
				challenge.chall_category, 
				challenge.chall_sit, 
				challenge.chall_auth, 
				challenge.chall_online, 
				challenge.chall_size, 
				challenge.chall_pic, 
				region.region_state, 
				region.region_city, 
				region.region_district, 
				(select race.race_name from race where race.race_id = challenge.race_id) as race_name
			FROM challenge, region
				WHERE challenge.region_id = region.region_id 
					and challenge.chall_id in 
						(select chall_id 
							from user_chall
								where user_id =#{userId} and user_reg_status != 'N')
					ORDER BY chall_id DESC
	</select>
	
	<select id="getUserChallbyUserId" resultType="com.spring.dto.UserChallenge">
		select 	user_id,
				chall_id,
				chall_auth_num,
				chall_reg_status,
				user_chall_status,
				user_reg_status
			from user_chall
				where user_id = #{userId} and user_reg_status != 'N'
					ORDER BY chall_id DESC
	</select>
	
	<update id="updateAuthNum" parameterType="com.spring.dto.UserChallenge">
		UPDATE user_chall
			SET chall_auth_num=chall_auth_num+1
				WHERE user_id = #{userId} and chall_id = #{chall_id}
	</update>
	
	<update id="deleteAuthNum" parameterType="com.spring.dto.UserChallenge">
		UPDATE user_chall
			SET chall_auth_num=chall_auth_num-1
				WHERE user_id = #{userId} and chall_id = #{chall_id}
	</update>
	
	<select id="countChallReg" parameterType="string">
		SELECT count(chall_reg_id)
			FROM challenge
				WHERE chall_reg_id = #{hostId}
					GROUP BY chall_reg_id
	</select>

</mapper>